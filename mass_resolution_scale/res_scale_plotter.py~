##########################################################################################
#                                  PLOTTER RESOLUTION                                    #
##########################################################################################
# Giuseppe Fasanella (ULB)
# Contact: giuseppe.fasanella@cern.ch
##########################################################################################

import math
from array import array

##########################################################################################
#                             Import ROOT and apply settings                             #
##########################################################################################
import ROOT

ROOT.gROOT.SetBatch(ROOT.kTRUE)
#ROOT.gROOT.SetBatch(ROOT.kFALSE)
ROOT.gStyle.SetOptStat(0)
ROOT.gStyle.SetPadTickX(1)
ROOT.gStyle.SetPadTickY(1)
#ROOT.gStyle.SetFillStyle(ROOT.kWhite)
ROOT.gStyle.SetOptTitle(0)
ROOT.gStyle.SetFrameBorderMode(ROOT.kWhite)
ROOT.gStyle.SetFrameFillColor(ROOT.kWhite)
ROOT.gStyle.SetCanvasBorderMode(ROOT.kWhite)
ROOT.gStyle.SetCanvasColor(ROOT.kWhite)
ROOT.gStyle.SetPadBorderMode(ROOT.kWhite)
ROOT.gStyle.SetPadColor(ROOT.kWhite)
ROOT.gStyle.SetStatColor(ROOT.kWhite)
ROOT.gStyle.SetErrorX(0)


##########################################################################################
#PLOTTING RESOLUTION
##########################################################################################


mass={}
mass_err={}
res={}
res_err={}#error on the resolution
for regions in ['BB','BE','EE']:
    mass[regions]=[]
    mass_err[regions]=[]
    res[regions]=[]
    res_err[regions]=[]

#variable_type='resolution'
#variable_type='resolution_supercluster'
#variable_type=scale
#variable_type='HoverE'
#variable_type='resolution_HoE_cut'
variable_type='scale_HoE_cut'

#Regions=['BB','BE','EE']
Regions=['BB']

#opern the file and take the numbers
for regions in Regions:
    with open(str('/user/gfasanel/public/HEEP/Eff_plots/histograms_mass_'+variable_type+'_'+regions+'.txt')) as file_res:
        for line in file_res:  #Line is a string       #split the string on whitespace, return a list of numbers
            # (as strings)                                                                               
            numbers_str = line.split()    #convert numbers to floats   
            numbers_float = map(float, line.split())
            ##numbers_float = [float(x) for x in numbers_str]  #map(float,numbers_str) works too
            mass[regions].append(numbers_float[0])
            mass_err[regions].append(0)#for the moment
            res[regions].append(numbers_float[1])
            res_err[regions].append(numbers_float[2])

#usage of array for TGraph, otherwise it doesn't work
mass_array={}
mass_err_array={}
res_array={}
res_err_array={}
res_graph={}

for regions in Regions:
    mass_array[regions] =array("d",mass[regions])
    mass_err_array[regions] =array("d",mass_err[regions])
    res_array[regions] =array("d",res[regions])
    res_err_array[regions] =array("d",res_err[regions])
    res_graph[regions]=ROOT.TGraphErrors(len(mass_array[regions]),mass_array[regions],res_array[regions],mass_err_array[regions],res_err_array[regions])

canvas={}
canvas['BB']=ROOT.TCanvas(str(variable_type+"_BB"),str(variable_type+"_BB"))
canvas['BE']=ROOT.TCanvas(str(variable_type+"_BE"),str(variable_type+"_BE"))
canvas['EE']=ROOT.TCanvas(str(variable_type+"_EE"),str(variable_type+"_EE"))

file_out= ROOT.TFile(str("~gfasanel/public/HEEP/Eff_plots/"+variable_type+"_plot.root"),"RECREATE")

file_out.cd()
for regions in Regions:
    canvas[regions].cd()
    res_graph[regions].SetMarkerSize(1.2)
    res_graph[regions].SetMarkerStyle(20)
    res_graph[regions].GetXaxis().SetTitleSize(0.042)
    res_graph[regions].GetXaxis().SetTitle('m_{ee} [GeV]')
    res_graph[regions].GetYaxis().SetTitleSize(0.052)
    res_graph[regions].GetYaxis().SetTitle('#sigma_{fit}')
    if variable_type=='HoverE':
        res_graph[regions].GetYaxis().SetTitle('HoverE sum')
    if variable_type=='scale':
        res_graph[regions].GetYaxis().SetTitle('mass scale')

    res_graph[regions].Draw("APE")
    canvas[regions].Write()
    canvas[regions].Print(str('~gfasanel/public/HEEP/Eff_plots/'+variable_type+'_'+regions+'.png'))
    canvas[regions].Print(str('~gfasanel/public/HEEP/Eff_plots/'+variable_type+'_'+regions+'.pdf'))
    canvas[regions].Print(str('~gfasanel/public/HEEP/Eff_plots/'+variable_type+'_'+regions+'.eps'))



